@page "/Tarefa/TarefaGrid"

@using GestaoDeProjetoWeb.Data.DTOs
@using GestaoDeProjetoWeb.Data
@using System.Text.Json
@using System.Text
@using GestaoDeProjetoWeb.Pages.Componentes
@using GestaoDeProjetoWeb.Servico

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ITarefaServico _iTarefaServico


 

<body class="adicionarCorFundoPagina">



    <GridApresentacaoComponente PaginaAtual="Tarefa"
                                InformacaoPagina="Tarefa/TarefaInfo"
                                Titulo="Cadastro de Tarefas" />


    <GridMensagemResultadoComponente Sucesso=@sucesso
                                     Erro=@erro />


    <div class="adicionaEspaco adicionarBorda tabelaLargura adicionarCorInterna">
        <div class="form-floating col-6">
            <input type="text" class="form-control tamanho-fonte-input" id="novoFiltro" @bind="@filtroGrid" />
            <label for="nomeProjeto">Nome ou descrição</label>
        </div>



        <div class="col-md-auto adicionarAjusteBotaoFiltro">
            <button class="botaoCustomizado botaoCustomizadoPesquisar" OnFiltrar="EventoAtualizarLista">
                <ion-icon class="botaoCustomizadoIcone" name="funnel-outline"></ion-icon>
                Filtrar
            </button>
        </div>

    </div>

    <GridBotoesComponente Inserir="EventoBotaoInserir"
                          Excluir="EventoBotaoExcluir"
                          BotaoExcluirHabilitado="@botaoExcluirHabilitado" />


    <div class="adicionaEspaco adicionarBorda tabelaLargura adicionarCorInterna">
        @if (Tarefa != null && Tarefa.Any())
        {
            <table class="table">
                <thead class="adicionarCorInterna">
                    <tr>
                        <th class="text-center">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="idSelecionarTodos" @onclick="EventoSelecionarTodos" />
                            </div>
                        </th>
                        <th class="col-1 estiloCabecalhoGrid">Id</th>
                        <th class="col-5 estiloCabecalhoGrid">Descricao</th>
       
                        <th class="col-5 estiloCabecalhoGrid">Situacao</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var Tarefa in Tarefa.Where(p => string.IsNullOrEmpty(filtroGrid) ||
                   p.Descricao.Contains(filtroGrid, StringComparison.OrdinalIgnoreCase) ||
                   p.Situacao.ToString().Contains(filtroGrid, StringComparison.OrdinalIgnoreCase)))
                    {
                        <tr>
                            <td class="text-center">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" @bind="Tarefa.Selecionado" id="idSelecionado" @onclick="() => EventoSelecionado(Tarefa)" />
                                </div>
                            </td>
                            <td class="col-1 estiloCamposColunas">@Tarefa.Id</td>
                            <td class="col-5 estiloCamposColunas">@Tarefa.Descricao</td>
            
                            <td class="col-5 estiloCamposColunas">@Tarefa.Situacao</td>
                        </tr>
                        @if (Tarefaelecionado == Tarefa)
                        {
                            <tr>
                                <td colspan="8">
                                    <GridBotoesSelecionadoComponente HabilitaBotaoAlterar="true"
                                                                     OnAlterar="() => EventoBotaoAlterar(Tarefa)"
                                                                     HabilitaBotaoExcluir="true"
                                                                     OnExcluir="EventoBotaoExcluir"
                                                                     HabilitaBotaoTarefa="false"
                                                                     OnTarefa="() => null" />
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>

            <GridSelecionadosComponente Count="@contadorSelecionados" />
        }
        else
        {
            <GridCarregando />
        }
    </div>

</body>

@code
{
    private HttpClient httpClient = new HttpClient();
    private string filtroGrid = string.Empty;
    private string erro = string.Empty;
    private string sucesso = string.Empty;
    private int contadorSelecionados = 0;
    private bool botaoExcluirHabilitado => TarefaSelecionados.Count >= 2;
    bool idSelecionarTodos = false;
    private TarefaDto Tarefaelecionado = new TarefaDto();
    private List<TarefaDto> TarefaSelecionados = new List<TarefaDto>();
    private List<TarefaDto> Tarefa = new List<TarefaDto>();


    private async Task EventoAtualizarLista(string novoFiltro)
    {
        filtroGrid = novoFiltro;
    }



    protected override async Task OnInitializedAsync()
    {
        Tarefa = await CarregaGrid();
    }

    private async Task<List<TarefaDto>> CarregaGrid()
    {
        await AtivarTemporizadorSucesso();
        TarefaSelecionados.Clear();
        contadorSelecionados = 0;
        erro = string.Empty;
        sucesso = string.Empty;
        List<TarefaDto> Tarefa = await _iTarefaServico.ObterTodasTarefasAsync();
        return Tarefa;
    }


    private async Task AtivarTemporizadorSucesso()
    {
        Console.WriteLine("AtivarTemporizadorSucesso chamado.");
        await Task.Delay(2000); // Aguarda 2 segundos
        sucesso = "";
        StateHasChanged();
    }


    private async Task AtivarTemporizadorErro()
    {
        Console.WriteLine("AtivarTemporizadorErro chamado.");
        erro = "Tarefa com erro!";
        await Task.Delay(2000); // Aguarda 2 segundos
        erro = "";
        StateHasChanged();
    }



    private async Task EventoBotaoInserir()
    {
        try
        {
            NavigationManager.NavigateTo($"Tarefa/TarefaCadastro/{null}");
            sucesso = "Tarefa cadastrado com sucesso!";
        }
        catch (Exception ex)
        {
            erro = "Ocorreu um erro inesperado: " + ex.Message;
            await AtivarTemporizadorErro();
        }

    }

    private async Task EventoBotaoAlterar(TarefaDto Tarefa)
    {
        try
        {
            var TarefaJson = JsonSerializer.Serialize(Tarefa);
            var encodedTarefaJson = Uri.EscapeDataString(TarefaJson);
            NavigationManager.NavigateTo($"/Tarefa/TarefaCadastro/{encodedTarefaJson}");
            sucesso = "Tarefa cadastrado com sucesso!";
            await AtivarTemporizadorSucesso();
        }
        catch (Exception ex)
        {
            erro = "Ocorreu um erro inesperado: " + ex.Message;
            await AtivarTemporizadorErro();
        }
    }

    private async Task EventoBotaoExcluir()
    {
        foreach (var Tarefa in TarefaSelecionados)
        {
            try
            {
                // await _iTarefaServico.ExcluirAsync(Tarefa.Id);
                sucesso = "Tarefa excluido com sucesso!";
            }
            catch (Exception ex)
            {
                erro = "Ocorreu um erro inesperado: " + ex.Message;
                await AtivarTemporizadorErro();
            }
        }
        await CarregaGrid();
    }

    private void EventoSelecionarTodos()
    {
        idSelecionarTodos = !idSelecionarTodos;
        contadorSelecionados = 0;
        TarefaSelecionados.Clear();

        if (idSelecionarTodos)
        {
            foreach (var Tarefa in Tarefa)
            {
                Tarefa.Selecionado = true;
                if (!TarefaSelecionados.Contains(Tarefa))
                {
                    TarefaSelecionados.Add(Tarefa);
                    contadorSelecionados++;
                    Tarefa.Selecionado = true;
                }
            }
            Console.WriteLine("Checkbox selecionado");
        }
        else
        {
            foreach (var Tarefa in Tarefa)
            {
                Tarefa.Selecionado = true;
                if (!TarefaSelecionados.Contains(Tarefa))
                {
                    Tarefa.Selecionado = false;
                }
            }
            Console.WriteLine("Checkbox não selecionado");
        }

    }


    void EventoSelecionado(TarefaDto Tarefa)
    {

        if (!Tarefa.Selecionado)
        {
            TarefaSelecionados.Add(Tarefa);
            contadorSelecionados++;
            Tarefa.Selecionado = true;
            Tarefaelecionado = Tarefa;
        }
        else
        {
            TarefaSelecionados.Remove(Tarefa);
            contadorSelecionados--;
            Tarefa.Selecionado = false;
            Tarefaelecionado = new TarefaDto();
        }
    }



}