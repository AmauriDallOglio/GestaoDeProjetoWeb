@page "/Projeto/ProjetoGrid"
@using GestaoDeProjetoWeb.Data.DTOs
@using GestaoDeProjetoWeb.Data
@using System.Text.Json
@using System.Text
@using GestaoDeProjetoWeb.Pages.Componentes
@using GestaoDeProjetoWeb.Servico
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IProjetoServico _iProjetoServico
@inject ISquadServico _iSquadServico
 
 
<body>
    <div class="AdicionarCorFundoPagina">

        <GridApresentacaoComponente PaginaAnterior=""
                                PaginaAtual="Projeto"
                                InformacaoPagina="Projeto/ProjetoInfo"
                                Titulo="Cadastro de Projetos"   />

        <GridMensagemResultadoComponente Sucesso=@sucesso
                                     Erro=@erro />
@* 
        <GridFiltroComponente FiltroNome="@filtroGrid"
                                        OnFiltroChanged="AtualizarLista"/> *@

        <div class="AdicionaEspaco AdicionarBorda TabelaLargura AdicionarCorInterna">
            <div class="form-floating col-6">
                <input type="text" class="form-control tamanho-fonte-input" id="novoFiltro" @bind="@filtroGrid" placeholder="Filtrar... " />
                <label for="nomeProjeto">Nome ou descrição</label>
            </div>



            <div class="col-md-auto AdicionarAjusteBotaoFiltro">
                    <button class="BotaoCustomizado BotaoCustomizado-pesquisar" OnFiltroChanged="AtualizarLista">
                    <ion-icon class="BotaoCustomizadoIcone" name="funnel-outline"></ion-icon>
                        Filtrar
                    </button>
                </div>
           
        </div>


        <GridBotoesComponente Inserir="BotaoInserir"
                                        Excluir="BotaoExcluir"
                                        BotaoExcluirHabilitado="@botaoExcluirHabilitado" />


        <div class="AdicionaEspaco AdicionarBorda TabelaLargura AdicionarCorInterna">
            @if (projetos != null && projetos.Any())
            {
                <table class="table">
                    <thead class="AdicionarCorInterna">
                        <tr>
                            <th class="col-1 EstiloCabecalhoColunas">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="idSelecionarTodos" @onclick="SelecionarTodos" />
                                </div>
                            </th>
                            <th class="col-1 EstiloCabecalhoColunas">Id</th>
                            <th class="col-3 EstiloCabecalhoColunas">Nome</th>
                            <th class="col-3 EstiloCabecalhoColunas">Descrição</th>
                            <th class="col-2 EstiloCabecalhoColunas">Data de início</th>
                            <th class="col-2 EstiloCabecalhoColunas">Data de final</th>
                            <th class="col-1 EstiloCabecalhoColunas">Situação</th>

                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var projeto in projetos.Where(p => string.IsNullOrEmpty(filtroGrid) ||
                                                                p.NomeProjeto.Contains(filtroGrid, StringComparison.OrdinalIgnoreCase) ||
                                                                p.Descricao.Contains(filtroGrid, StringComparison.OrdinalIgnoreCase) ||
                                                                p.Situacao.ToString().Contains(filtroGrid, StringComparison.OrdinalIgnoreCase)))
                        {
                            <tr>
                                <td class="col-1 EstiloCamposColunas text-center">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" @bind="projeto.Selecionado" id="idSelecionado" @onclick="() => Selecionado(projeto)" />
                                    </div>
                                </td>
                                <td class="col-1 EstiloCamposColunas">@projeto.Id</td>
                                <td class="col-3 EstiloCamposColunas">@projeto.NomeProjeto</td>
                                <td class="col-3 EstiloCamposColunas">@projeto.Descricao</td>
                                <td class="col-2 EstiloCamposColunas">@projeto.DataHoraInicio.ToString("dd/MM/yyyy")</td>
                                <td class="col-2 EstiloCamposColunas">@projeto.DataHoraFim?.ToString("dd/MM/yyyy")</td>
                                <td class="col-1 EstiloCamposColunas">@projeto.SituacaoDescricao</td>
                            </tr>
                            @if (projetoSelecionado == projeto)
                            {
                                <tr>
                                    <td colspan="8">
                                        <GridBotoesSelecionadoComponente HabilitaBotaoAlterar="true"
                                                                         OnAlterar="() => BotaoAlterar(projeto)"
                                                                         HabilitaBotaoExcluir="true"
                                                                         OnExcluir="BotaoExcluir"
                                                                         HabilitaBotaoFormulario="true"
                                                                         OnSquad="() => ProjetoSquadCadastro(projeto)" />
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
                <GridSelecionadosComponente Count="@contadorSelecionados" />
            }
            else
            {
                <p>Carregando...</p>
            }
        </div>
    </div>
</body>
 


@code 
{
    private HttpClient httpClient = new HttpClient();
    private string filtroGrid = string.Empty;
    private List<ProjetoDto> projetos = new List<ProjetoDto>();
    private string erro = string.Empty;
    private string sucesso = string.Empty;
    private List<ProjetoDto> projetosSelecionados = new List<ProjetoDto>();
    private int contadorSelecionados = 0;
    private bool botaoExcluirHabilitado => projetosSelecionados.Count >= 2;
    bool idSelecionarTodos = false;
    private ProjetoDto projetoSelecionado = new ProjetoDto();



    private async Task AtualizarLista(string novoFiltro)
    {
        filtroGrid = novoFiltro;
    }


    protected override async Task OnInitializedAsync()
    {
        projetos = await CarregaGrid();
    }

    private async Task<List<ProjetoDto>> CarregaGrid()
    {
        await AtivarTemporizadorSucesso();
        projetosSelecionados.Clear();
   
        contadorSelecionados = 0;
        erro = string.Empty;
        sucesso = string.Empty;
        List<ProjetoDto> projetos = await _iProjetoServico.ObterTodosProjetosAsync();
        return projetos;
    }

    // private async Task MsgSucesso()
    // {
    //     sucesso = "Projeto cadastrado com sucesso!";
    //     await AtivarTemporizadorSucesso();
    // }

    private async Task AtivarTemporizadorSucesso()
    {
        Console.WriteLine("AtivarTemporizadorSucesso chamado.");
        await Task.Delay(2000); // Aguarda 2 segundos
        sucesso = null;
        StateHasChanged();
    }

    // private async Task MsgErro()
    // {
    //     erro = "Projeto com erro!";
    //     await AtivarTemporizadorErro();
    // }

    private async Task AtivarTemporizadorErro()
    {
        Console.WriteLine("AtivarTemporizadorErro chamado.");
        await Task.Delay(2000); // Aguarda 2 segundos
        erro = null;
        StateHasChanged();
    }


    private async Task ProjetoSquadCadastro(ProjetoDto projetoDto)
    {
        try
        {
            var projetoJson = JsonSerializer.Serialize(projetoDto);
            var encodedProjetoJson = Uri.EscapeDataString(projetoJson);
            NavigationManager.NavigateTo($"ProjetoSquad/ProjetoSquadCadastro/{encodedProjetoJson}");
        }
        catch (Exception ex)
        {
            erro = "Ocorreu um erro inesperado: " + ex.Message;
            await AtivarTemporizadorErro();
        }

    }


    private async Task BotaoInserir()
    {
        try
        {
            NavigationManager.NavigateTo($"Projeto/ProjetoCadastro/{null}");
        }
        catch (Exception ex)
        {
            erro = "Ocorreu um erro inesperado: " + ex.Message;
            await AtivarTemporizadorErro();
        }

    }

    private async Task BotaoAlterar(ProjetoDto projeto)
    {
        try
        {
            var projetoJson = JsonSerializer.Serialize(projeto); 
            var encodedProjetoJson = Uri.EscapeDataString(projetoJson);
            NavigationManager.NavigateTo($"/Projeto/ProjetoCadastro/{encodedProjetoJson}");
            sucesso = "Projeto cadastrado com sucesso!";
            await AtivarTemporizadorSucesso();
        }
        catch (Exception ex)
        {
            erro = "Ocorreu um erro inesperado: " + ex.Message;
            await AtivarTemporizadorErro();
        }
    }

    private async Task BotaoExcluir()
    {
        foreach (var projeto in projetosSelecionados)
        {
            try
            {
                await _iProjetoServico.Excluir(projeto.Id);
            }
            catch (Exception ex)
            {
                erro = "Ocorreu um erro inesperado: " + ex.Message;
                await AtivarTemporizadorErro();
            }
        }
        await CarregaGrid();
    }

    private void SelecionarTodos()
    {
        idSelecionarTodos = !idSelecionarTodos;
        contadorSelecionados = 0;
        projetosSelecionados.Clear();

        if (idSelecionarTodos)
        {
            foreach (var projeto in projetos)
            {
                projeto.Selecionado = true;
                if (!projetosSelecionados.Contains(projeto))
                {
                    projetosSelecionados.Add(projeto);
                    contadorSelecionados++;
                    projeto.Selecionado = true;
                }
            }
            Console.WriteLine("Checkbox selecionado");
        }
        else
        {
            foreach (var projeto in projetos)
            {
                projeto.Selecionado = true;
                if (!projetosSelecionados.Contains(projeto))
                {
                    projeto.Selecionado = false;
                }
            }
            Console.WriteLine("Checkbox não selecionado");
        }
    }


    void Selecionado(ProjetoDto projeto)
    {

        if (!projeto.Selecionado)
        {
            projetosSelecionados.Add(projeto);
            contadorSelecionados++;
            projeto.Selecionado = true;
            projetoSelecionado = projeto;
        }
        else
        {
            projetosSelecionados.Remove(projeto);
            contadorSelecionados--;
            projeto.Selecionado = false;
            projetoSelecionado = null;
        }
    }


 
 

}




