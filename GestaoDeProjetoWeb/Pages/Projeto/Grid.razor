@page "/Projeto/Grid"
@using GestaoDeProjetoWeb.Data
@using GestaoDeProjetoWeb.Data.Projeto
@using System.Text.Json
@using System.Text
@using GestaoDeProjetoWeb.Servico
@inject IProjetoServico _iProjetoServico

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

 

<body>
    <h3 class="espaco adicionaEspaco">Cadastro de Projetos</h3>
  
    <div class="hstack gap-3">
        <div class="p-2">
            <nav style="--bs-breadcrumb-divider: '>';" aria-label="breadcrumb">
                <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="#">Home</a></li>
                <li class="breadcrumb-item active" aria-current="page"> Projeto </li>
                </ol>
            </nav>

        </div>   
        <div class="p-2 ms-auto">
            <p>
                <a href="Projeto/ProjetoInfo" class="link-info link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover">Info</a>
            </p>
      
        </div>
    </div>
    @if (!string.IsNullOrWhiteSpace(erro))
    {
        <div class="alert alert-danger" role="alert">
            @erro
        </div>
    }

    @if (!string.IsNullOrWhiteSpace(sucesso))
    {
        <div class="alert alert-success" role="alert">
            @sucesso
        </div>
    }
    
    @if (projetos != null && projetos.Any())
    {
        <div class="row g-3 align-items-center adicionaEspaco">
            <div class="col-md-auto">
                <button type="button" class="btn btn-outline-success custom-btn" @onclick="Inserir">Inserir</button>
 
                @* <button type="button" class="btn btn-outline-primary custom-btn" @onclick="Atualizar">Alterar</button> *@
                <button type="button" class="btn btn-outline-danger custom-btn" @onclick="Excluir" disabled="@(!botaoExcluirHabilitado)">Excluir</button>
                @* <button type="button" class="btn btn-outline-danger custom-btn" data-bs-toggle="modal" data-bs-target="#exampleModal" > Excluir </button> *@
                @* <button type="button" class="btn btn-outline-primary custom-btn" @onclick="MsgSucesso"> Sucesso </button>  *@
                @* <button type="button" class="btn btn-outline-primary custom-btn" @onclick="MsgErro"> Erro </button> *@



            </div>

            <div class="col-md-auto">
                <label for="filtro" class="col-form-label">Filtrar:</label>
            </div>
                
            <div class="col-md-auto">
                <input type="text" class="form-control" id="filtro" @bind="filtro">
            </div>
        </div>

        <table class="table">
            <thead class="table-light">
                <tr>
                    <th class="text-center">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="idSelecionarTodos" @onclick="SelecionarTodos" />
                        </div>
                    </th>
                    <th class="col-1 custom-font">Id</th>
                    <th class="col-3 custom-font">Nome</th>
                    <th class="col-3 custom-font">Descrição</th>
                    <th class="col-2 custom-font">Data de início</th>
                    <th class="col-2 custom-font">Data de final</th>
                    <th class="col-1 custom-font">Situação</th>

                </tr>
            </thead>
            <tbody>
                @foreach (var projeto in projetos.Where(p => string.IsNullOrEmpty(filtro) ||
                    p.NomeProjeto.Contains(filtro, StringComparison.OrdinalIgnoreCase) ||
                    p.Descricao.Contains(filtro, StringComparison.OrdinalIgnoreCase) ||
                    p.Situacao.ToString().Contains(filtro, StringComparison.OrdinalIgnoreCase)))
                {
                    <tr>
                        <td class="text-center">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" @bind="projeto.Selecionado" id="idSelecionado" @onclick="() => Selecionado(projeto)" />
                            </div>
                        </td>
                        <td class="col-1 custom-font">@projeto.Id</td>
                        <td class="col-3  custom-font">@projeto.NomeProjeto</td>
                        <td class="col-3  custom-font">@projeto.Descricao</td>
                        <td class="col-2">@projeto.DataHoraInicio.ToString("dd/MM/yyyy")</td>
                        <td class="col-2">@projeto.DataHoraFim?.ToString("dd/MM/yyyy")</td>
                        <td class="col-1">@projeto.SituacaoDescricao</td>
                    </tr>
                    @if (projetoSelecionado == projeto)
                    {
                        <tr>
                            <td colspan="8">
                                <button class="btn btn-outline-primary custom-btn"   @onclick="() => Alterar(projeto)">Alterar</button>
                                <button class="btn btn-outline-danger custom-btn" @onclick="Excluir">Excluir</button>
                            </td>
                        </tr>
                    }
                }
                </tbody>
        </table>


        <div class="col-md-auto">
            <label>Projetos Selecionados: @contadorSelecionados</label>
        </div>
    }
    else
    {
        <p>Carregando...</p>
    }
</body>
 


<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Exclusão</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Deseja excluir os registros selecionados?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Não</button>
                <button type="button" class="btn btn-primary" @onclick="Excluir">Sim</button>
            </div>
        </div>
    </div>
</div>



@code 
{
    private HttpClient httpClient = new HttpClient();
    private string filtro = string.Empty;
    private List<ProjetoDto> projetos = new List<ProjetoDto>();
    private string erro = string.Empty;
    private string sucesso = string.Empty;
    private List<ProjetoDto> projetosSelecionados = new List<ProjetoDto>();
    private int contadorSelecionados = 0;
    private bool botaoExcluirHabilitado => projetosSelecionados.Count >= 2;
    bool idSelecionarTodos = false;
    private ProjetoDto projetoSelecionado = new ProjetoDto();

    protected override async Task OnInitializedAsync()
    {
        projetos = await CarregaGrid();
    }

    private async Task<List<ProjetoDto>> CarregaGrid()
    {
        await AtivarTemporizadorSucesso();
        projetosSelecionados.Clear();
        contadorSelecionados = 0;
        erro = string.Empty;
        sucesso = string.Empty;
        List<ProjetoDto> projetos = await _iProjetoServico.ObterTodosProjetosAsync();
        return projetos;
    }

    // private async Task MsgSucesso()
    // {
    //     sucesso = "Projeto cadastrado com sucesso!";
    //     await AtivarTemporizadorSucesso();
    // }

    private async Task AtivarTemporizadorSucesso()
    {
        Console.WriteLine("AtivarTemporizadorSucesso chamado.");
        await Task.Delay(2000); // Aguarda 2 segundos
        sucesso = null;
        StateHasChanged();
    }

    // private async Task MsgErro()
    // {
    //     erro = "Projeto com erro!";
    //     await AtivarTemporizadorErro();
    // }

    private async Task AtivarTemporizadorErro()
    {
        Console.WriteLine("AtivarTemporizadorErro chamado.");
        await Task.Delay(2000); // Aguarda 2 segundos
        erro = null;
        StateHasChanged();
    }



    private async Task Inserir()
    {
        try
        {
            NavigationManager.NavigateTo($"Projeto/Cadastro/{null}");
        }
        catch (Exception ex)
        {
            erro = "Ocorreu um erro inesperado: " + ex.Message;
            await AtivarTemporizadorErro();
        }

    }

    private async Task Alterar(ProjetoDto projeto)
    {
        try
        {
            var projetoJson = JsonSerializer.Serialize(projeto); 
            var encodedProjetoJson = Uri.EscapeDataString(projetoJson);
            NavigationManager.NavigateTo($"/Projeto/Cadastro/{encodedProjetoJson}");
            sucesso = "Projeto cadastrado com sucesso!";
            await AtivarTemporizadorSucesso();
        }
        catch (Exception ex)
        {
            erro = "Ocorreu um erro inesperado: " + ex.Message;
            await AtivarTemporizadorErro();
        }
    }

    private async Task Excluir()
    {
        foreach (var projeto in projetosSelecionados)
        {
            try
            {
                await _iProjetoServico.Excluir(projeto.Id);
            }
            catch (Exception ex)
            {
                erro = "Ocorreu um erro inesperado: " + ex.Message;
                await AtivarTemporizadorErro();
            }
        }
        await CarregaGrid();
    }

    private void SelecionarTodos()
    {
        idSelecionarTodos = !idSelecionarTodos;
        contadorSelecionados = 0;
        projetosSelecionados.Clear();

        if (idSelecionarTodos)
        {
            foreach (var projeto in projetos)
            {
                projeto.Selecionado = true;
                if (!projetosSelecionados.Contains(projeto))
                {
                    projetosSelecionados.Add(projeto);
                    contadorSelecionados++;
                    projeto.Selecionado = true;
                }
            }
            Console.WriteLine("Checkbox selecionado");
        }
        else
        {
            foreach (var projeto in projetos)
            {
                projeto.Selecionado = true;
                if (!projetosSelecionados.Contains(projeto))
                {
                    projeto.Selecionado = false;
                }
            }
            Console.WriteLine("Checkbox não selecionado");
        }
        
    }


    void Selecionado(ProjetoDto projeto)
    {
  
        if (!projeto.Selecionado)
        {
            projetosSelecionados.Add(projeto);
            contadorSelecionados++;
            projeto.Selecionado = true;
            projetoSelecionado = projeto;
        }
        else
        {
            projetosSelecionados.Remove(projeto);
            contadorSelecionados--;
            projeto.Selecionado = false;
            projetoSelecionado = null;
        }
    }

}




