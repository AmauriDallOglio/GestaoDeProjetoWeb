@page "/Projeto/ProjetoCadastro"
@page "/Projeto/ProjetoCadastro/{projetoJson}"
@using GestaoDeProjetoWeb.Data.DTOs
@using GestaoDeProjetoWeb.Data.Util
@using GestaoDeProjetoWeb.Data
@using System.ComponentModel.DataAnnotations;
@using System.Text.Json
@using GestaoDeProjetoWeb.Pages.Componentes
@using GestaoDeProjetoWeb.Servico
@inject NavigationManager NavigationManager
@inject IProjetoServico _iProjetoServico
 

<body>
    @* <div class=" borda-divisao"> *@
        <GridApresentacaoComponente PaginaAnterior="Projeto"
                                PaginaAnteriorLink="/Projeto/ProjetoGrid"
                                PaginaAtual=@(projetoCadastro.Id > 0 ? "Editar" : "Inserir")
                                InformacaoPagina=""
                                Titulo=@(projetoCadastro.Id > 0 ? "Formulário de alterar" : "Formulário de inserção") />


        <div class="row g-2 align-items-center adicionaEspaco borda-divisao">
            <EditForm Model="@projetoCadastro" OnValidSubmit="@CadastrarProjeto" class="row g-1 formulario-input">
                <DataAnnotationsValidator />

                @if (!string.IsNullOrWhiteSpace(erro))
                {
                    <div class="alert alert-danger" role="alert">
                        @erro
                    </div>
                }

                <div class="form-floating col-12">
                    <input type="text" class="form-control tamanho-fonte-input" id="nomeProjeto" @bind="@projetoCadastro.NomeProjeto" placeholder="Descreva o nome do projeto" />
                    <label for="nomeProjeto">Nome do Projeto</label>
                    <ValidationMessage For="@(() => projetoCadastro.NomeProjeto)" />
                </div>

          
                <div class="form-floating col-12">
                    <textarea class="form-control tamanho-fonte-input" id="descricao" @bind="@projetoCadastro.Descricao" placeholder="Descreva a descrição do projeto"></textarea>
                    <label for="descricao">Descrição</label>
                    <ValidationMessage For="@(() => projetoCadastro.Descricao)" />
                </div>

                <div class="form-floating col-md-6">
                    <input type="date" class="form-control tamanho-fonte-input" id="dataHoraInicio" @bind="@projetoCadastro.DataHoraInicio" />
                    <label for="dataHoraInicio">Data inicial</label>
                    <ValidationMessage For="@(() => projetoCadastro.DataHoraInicio)" />
                </div>

                <div class="form-floating col-md-6">
                    <input type="date" class="form-control tamanho-fonte-input" id="dataHoraFim" @bind="@projetoCadastro.DataHoraFim" />
                    <label for="dataHoraFim">Data final</label>
                    <ValidationMessage For="@(() => projetoCadastro.DataHoraFim)" />
                </div>

                <div class="form-floating col-6">
                    <select class="form-select tamanho-fonte-input" id="situacao" @bind="@projetoCadastro.Situacao">
                        <option value="">Selecione a situação</option>
                        @foreach (SituacaoProjeto situacao in Enum.GetValues(typeof(SituacaoProjeto)))
                        {
                            <option value="@((short)situacao)">@situacao</option>
                        }
                    </select>
                    <label for="situacao">Situação:</label>
                    <ValidationMessage For="@(() => projetoCadastro.Situacao)" />
                </div>

             @*    <div class="form-floating col-6">
                    <select class="form-select tamanho-fonte-input" id="situacao" @bind="projetoCadastro.Situacao">
                        @foreach (var situacao in comboItems)
                        {
                            <option value="@situacao.Id">@situacao.Descricao</option>
                        }
                    </select>
                    <label for="situacao">Situação:</label>
                    <ValidationMessage For="@(() => projetoCadastro.Situacao)" />
                </div> *@

                <FormularioBotoesComponente OnCancel="Cancelar" OnSave="CadastrarProjeto" />

            </EditForm>
        </div>
  @*   </div> *@
</body>


@code {
    [Parameter]
    public string projetoJson { get; set; }
    private ProjetoDto projetoCadastro = new ProjetoDto();
    private HttpClient httpClient = new HttpClient();
    private List<ComboItem> comboItems = new List<ComboItem>();
    private string erro = string.Empty;


    private async Task OnNomeProjetoChanged(string newValue)
    {
        projetoCadastro.NomeProjeto = newValue;
    }

 
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            comboItems = await _iProjetoServico.ObterComboAsync();
        }
        catch (Exception ex)
        {
            erro = "Erro ao carregar os dados: " + ex.Message;
        }

        if (!string.IsNullOrEmpty(projetoJson))
        {
            try
            {
                projetoCadastro = JsonSerializer.Deserialize<ProjetoDto>(Uri.UnescapeDataString(projetoJson));
            }
            catch (Exception ex)
            {
                erro = "Erro ao desserializar o projeto: " + ex.Message;
                await AtivarTemporizadorErro();
            }
        }
    }

    private async Task CadastrarProjeto()
    {
        try
        {
            HttpResponseMessage response = new HttpResponseMessage();
            response = await _iProjetoServico.CadastroAsync(projetoCadastro);

            if (!response.IsSuccessStatusCode)
            {
                erro = "Ocorreu um erro ao adicionar/atualizar o projeto. Por favor, tente novamente. " + response.ToString();
                await AtivarTemporizadorErro();
            }
            else
            {
                NavigationManager.NavigateTo("/Projeto/ProjetoGrid");
            }
        }
        catch (Exception ex)
        {
            erro = "Ocorreu um erro ao adicionar o projeto. Por favor, tente novamente. " + ex.Message.ToString();
            await AtivarTemporizadorErro();
        }

    }

    private async Task AtivarTemporizadorErro()
    {
        Console.WriteLine("AtivarTemporizadorErro chamado.");
        await Task.Delay(2000);
        erro = "";

        StateHasChanged();
    }

    private void Cancelar()
    {
        NavigationManager.NavigateTo("/Projeto/ProjetoGrid");
    }


   


}