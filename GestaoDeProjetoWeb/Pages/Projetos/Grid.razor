@page "/Projetos/Grid"
@using System.Text.Json
@using GestaoDeProjetoWeb.Data
@using System.Text
@* @inject ProjetoService ProjetoService *@
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime




<!DOCTYPE html>
<html lang="pt-BR">
    <head>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
        <meta charset="UTF-8">
        <title>Página das projetos</title>

        <style>
           .container {
                display: flex; /* Usa o modelo de layout flexível */
                justify-content: space-between; /* Distribui o espaço entre os elementos filhos */
                align-items: center; /* Alinha os itens verticalmente */
                height: 100vh; /* Define a altura como 100% da altura da janela */
                padding: 20px; /* Adiciona espaçamento interno */
            }

            .espaco {
                margin-bottom: 20px; /* Adiciona espaço entre grupos de formulários */
            }

            .custom-font {
                font-family: 'SuaFonte', sans-serif; /* Substitua 'SuaFonte' pela fonte desejada */
            }

            .custom-btn {
                height: 40px; /* Altura desejada */
                width: 120px; /* Largura desejada */
            }

        </style>
    </head>

    <body>
        <h3 class="espaco">Projetos</h3>

        @if (!string.IsNullOrWhiteSpace(erro))
        {
            <div class="alert alert-danger" role="alert">
                @erro
            </div>
        }

        @if (!string.IsNullOrWhiteSpace(sucesso))
        {
            <div class="alert alert-success" role="alert">
                @sucesso
            </div>
        }
    
        @if (projetos != null && projetos.Any())
        {
            <div class="row g-3 align-items-center espaco">
                <div class="col-md-auto">
                    <button type="button" class="btn btn-outline-success custom-btn" @onclick="AbrirFormulario">Inserir</button>
                    <button type="button" class="btn btn-outline-success custom-btn" @onclick="Atualizar">Atualizar</button>

                    <button type="button" class="btn btn-outline-danger custom-btn" @onclick="ExcluirProjetosSelecionados" disabled="@(!botaoExcluirHabilitado)">Excluir</button>

                    @* <button class="btn btn-primary" @onclick="SelecionarTodos">Atualizar Grid</button> *@


                </div>

                <div class="col-md-auto">
                    <label for="filtro" class="col-form-label">Filtrar:</label>
                </div>
                
                <div class="col-md-auto">
                    <input type="text" class="form-control" id="filtro" @bind="filtro">
                </div>
            </div>

            <table class="table table-striped border border-silver">
                <thead>
                    <tr>
                        <th class="text-center">
                            <div class="form-check">
@*                                 <input class="form-check-input" type="checkbox" id="selecionarTodos" onchange="selecionarTodos()">
                                <label class="form-check-label" for="selecionarTodos"></label> *@

                                <input class="form-check-input" type="checkbox" id="idSelecionarTodos" @onclick="SelecionarTodos" />
@*                                 <label class="form-check-label" for="selecionarTodos"></label> *@

                            </div>
                        </th>
                        <th class="col-1 custom-font">Id</th>
                        <th class="col-3 custom-font">Nome do projeto</th>
                        <th class="col-3 custom-font">Descrição</th>
                        <th class="col-2 custom-font">Data de início</th>
                        <th class="col-2 custom-font">Data de fim</th>
                        <th class="col-1 custom-font">Situacao</th>
 
                    </tr>
                </thead>
                <tbody>
                    @foreach (var projeto in projetos.Where(p => string.IsNullOrEmpty(filtro) ||
                                                            p.NomeProjeto.Contains(filtro, StringComparison.OrdinalIgnoreCase) ||
                                                            p.Descricao.Contains(filtro, StringComparison.OrdinalIgnoreCase) ||
                                                            p.Situacao.ToString().Contains(filtro, StringComparison.OrdinalIgnoreCase)))
                    {
                        <tr>
                            <td class="text-center">
                                <div class="form-check">
                                <input class="form-check-input" type="checkbox" @bind="projeto.Selecionado" id="idSelecionado" @onclick="() => Selecionado(projeto)" />
                                </div>
                            </td>
                            <td class="col-1">@projeto.Id</td>
                            <td class="col-3">@projeto.NomeProjeto</td>
                            <td class="col-3">@projeto.Descricao</td>
                        <td class="col-2">@projeto.DataHoraInicio.ToString("dd/MM/yyyy")</td>
                        <td class="col-2">@projeto.DataHoraFim?.ToString("dd/MM/yyyy")</td>
                            <td class="col-1">@projeto.Situacao</td>
                        </tr>
                        @if (projetoSelecionado == projeto)
                        {
                            <tr>
                                <td colspan="8">
                                    <button class="btn btn-outline-primary custom-btn" @onclick="() => EditarEmpresa(projeto)">Alterar</button>
                                    <button class="btn btn-outline-danger custom-btn" @onclick="ExcluirProjetosSelecionados">Excluir</button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
            <div class="col-md-auto">
                <label>Projetos Selecionados: @contadorSelecionados</label>
            </div>
        }
        else
        {
            <p>Carregando...</p>
        }

       
    </body>
</html>


@code 
{
    private HttpClient httpClient = new HttpClient();
    private string filtro = string.Empty;
    private List<ProjetoDto> projetos;
    protected override async Task OnInitializedAsync()
    {
        projetos = await CarregaTodosProjetosAsync();
    }

    private async Task<List<ProjetoDto>> CarregaTodosProjetosAsync()
    {
        try
        {
            // projetos = await ProjetoService.ObterTodosProjetosAsync();
            // using (HttpClient httpClient = new HttpClient())
            // {
            var response = await httpClient.GetStringAsync("https://localhost:7006/api/v1/Projeto/ObterTodos");
            RetornoPaginadoGenerico<ProjetoDto> resultado = JsonSerializer.Deserialize<RetornoPaginadoGenerico<ProjetoDto>>(response, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            projetos = resultado.Modelos.ToList();
            // }
        }
        catch (Exception)
        {
            projetos = new List<ProjetoDto>
            {
                new ProjetoDto
                {
                    Id = 1,
                    NomeProjeto = "Exemplo OFF",
                    Descricao = "Projeto de exemplo OFF",
                    DataHoraInicio = DateTime.Now,
                    DataHoraFim = DateTime.Now.AddDays(30),
                    Situacao = 0
                }
            };
        }
        return projetos;
    }

    private string erro;
    private string sucesso;
    private ProjetoDto novaEmpresa = new ProjetoDto();

    private async Task Adicionar()
    {
        try
        {
            if (string.IsNullOrEmpty(novaEmpresa.Descricao))
            {
                erro = "Descrição não possui informação!";
                AtivarTemporizadorErro();
            }
            else
            {
                // using (HttpClient httpClient = new HttpClient())
                // {
                var response = await httpClient.GetStringAsync("https://localhost:7006/api/v1/Projeto/ObterTodos");
                projetos = JsonSerializer.Deserialize<List<ProjetoDto>>(response, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });


                if (projetos.Count() > 0)
                {
                    await CarregaTodosProjetosAsync();
                    sucesso = "Salvo com sucesso!";
                    AtivarTemporizadorSucesso();
                }
                else
                {
                    erro = "Ocorreu um erro ao adicionar a empresa. Por favor, tente novamente.";
                    AtivarTemporizadorErro();
                }
                // }
            }
        }
        catch (Exception ex)
        {
            erro = "Ocorreu um erro inesperado: " + ex.Message;
            AtivarTemporizadorErro();
        }
    }

    private async Task ExcluirProjetosSelecionados()
    {
        foreach (var projeto in projetosSelecionados)
        {
            // Cria a requisição de exclusão
            var request = new ProjetoExcluirRequest { Id = projeto.Id };

            // Serializa a requisição para JSON
            var requestContent = new StringContent(JsonSerializer.Serialize(request), Encoding.UTF8, "application/json");

            // Configura a requisição HTTP DELETE com o corpo JSON
            var requestMessage = new HttpRequestMessage(HttpMethod.Delete, "https://localhost:7006/api/v1/Projeto/Excluir")
                {
                    Content = requestContent
                };

            // Faz a chamada HTTP DELETE
            var response = await httpClient.SendAsync(requestMessage);

            // Verifica se a resposta foi bem-sucedida
            if (!response.IsSuccessStatusCode)
            {
                // Lidar com erros de exclusão
                Console.WriteLine($"Erro ao excluir o projeto com Id: {projeto.Id}");
            }
        }
        projetosSelecionados.Clear();
        await CarregaTodosProjetosAsync();
    }

    private async Task AtivarTemporizadorErro()
    {
        await Task.Delay(2000); // Aguarda segundos
        erro = null;
        sucesso = null;
        StateHasChanged(); // Notifica o Blazor para atualizar a exibição
    }

    private async Task AtivarTemporizadorSucesso()
    {
        await Task.Delay(2000); // Aguarda segundos
        erro = null;
        sucesso = null;
        StateHasChanged(); // Notifica o Blazor para atualizar a exibição
    }

    private async Task Atualizar()
    {
        try
        {
            novaEmpresa = new ProjetoDto();
            await CarregaTodosProjetosAsync();
        }
        catch (Exception ex)
        {
            erro = "Ocorreu um erro inesperado: " + ex.Message;
            AtivarTemporizadorErro();
        }
    }

    private void AbrirFormulario()
    {
        NavigationManager.NavigateTo("Projetos/Cadastro");
    }

    private void EditarEmpresa(ProjetoDto empresa)
    {

    }



    private List<ProjetoDto> projetosSelecionados = new List<ProjetoDto>();
    private int contadorSelecionados = 0;
    private bool botaoExcluirHabilitado => projetosSelecionados.Count >= 2;
    bool idSelecionarTodos = false;


    private void SelecionarTodos()
    {
        idSelecionarTodos = !idSelecionarTodos;
        contadorSelecionados = 0;
        projetosSelecionados.Clear();

        if (idSelecionarTodos)
        {
            foreach (var projeto in projetos)
            {
                projeto.Selecionado = true;
                if (!projetosSelecionados.Contains(projeto))
                {
                    projetosSelecionados.Add(projeto);
                    contadorSelecionados++;
                    projeto.Selecionado = true;
                }
            }
            Console.WriteLine("Checkbox selecionado");
        }
        else
        {
            foreach (var projeto in projetos)
            {
                projeto.Selecionado = true;
                if (!projetosSelecionados.Contains(projeto))
                {
                    projeto.Selecionado = false;
                }
            }
            Console.WriteLine("Checkbox não selecionado");
        }
        
    }


    private ProjetoDto projetoSelecionado = null;
    void Selecionado(ProjetoDto projeto)
    {
  
        if (!projeto.Selecionado)
        {
            projetosSelecionados.Add(projeto);
            contadorSelecionados++;
            projeto.Selecionado = true;
            projetoSelecionado = projeto;
        }
        else
        {
            projetosSelecionados.Remove(projeto);
            contadorSelecionados--;
            projeto.Selecionado = false;
            projetoSelecionado = null;
        }
    }

}




