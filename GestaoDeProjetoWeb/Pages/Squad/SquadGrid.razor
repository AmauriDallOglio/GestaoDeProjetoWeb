@page "/Squad/SquadGrid"
@using GestaoDeProjetoWeb.Data.DTOs
@using GestaoDeProjetoWeb.Data
@using System.Text.Json
@using System.Text
@using GestaoDeProjetoWeb.Pages.Componentes
@using GestaoDeProjetoWeb.Servico

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ISquadServico _iSquadServico

<body>
    <div class=" bordered-div">

        <ApresentacaoComponente PaginaAtual="Squad"
                                InformacaoPagina="Squad/SquadInfo"
                                Titulo="Cadastro de squad" />

        <MensagemResultadoComponente Sucesso=@sucesso
                                     Erro=@erro />

        <FiltroEControlesComponente Filtro="@filtroGrid"
                                    OnFiltroChanged="AtualizarLista"
                                    Inserir="BotaoInserir" 
                                    Excluir="BotaoExcluir" 
                                    BotaoExcluirHabilitado="@botaoExcluirHabilitado" />

        <div class="row g-3 align-items-center adicionaEspaco bordered-div">
            @if (squad != null && squad.Any())
            {
                <table class="table">
                    <thead class="table-light">
                        <tr>
                            <th class="text-center">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="idSelecionarTodos" @onclick="SelecionarTodos" />
                                </div>
                            </th>
                            <th class="col-6 custom-font">Id</th>
                            <th class="col-6 custom-font">Descrição</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var squad in squad.Where(p => string.IsNullOrEmpty(filtroGrid) ||
                       p.Descricao.Contains(filtroGrid, StringComparison.OrdinalIgnoreCase) ||
                       p.Inativo.ToString().Contains(filtroGrid, StringComparison.OrdinalIgnoreCase)))
                        {
                            <tr>
                                <td class="text-center">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" @bind="squad.Selecionado" id="idSelecionado" @onclick="() => Selecionado(squad)" />
                                    </div>
                                </td>
                                <td class="col-6 custom-font">@squad.Id</td>
                                <td class="col-6 custom-font">@squad.Descricao</td>
                            </tr>
                            @if (squadelecionado == squad)
                            {
                                <tr>
                                    <td colspan="8">
                                        <button class="btn btn-outline-primary custom-btn" @onclick="() => Alterar(squad)">Alterar</button>
                                        <button class="btn btn-outline-danger custom-btn" @onclick="BotaoExcluir">Excluir</button>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
                <div class="col-md-auto">
                    <label>squad Selecionados: @contadorSelecionados</label>
                </div>
            }
            else
            {
                <p>Carregando...</p>
            }
        </div>
    </div>
</body>

@code
{
    private HttpClient httpClient = new HttpClient();
    private string filtroGrid = string.Empty;
    private string erro = string.Empty;
    private string sucesso = string.Empty;
    private int contadorSelecionados = 0;
    private bool botaoExcluirHabilitado => squadSelecionados.Count >= 2;
    bool idSelecionarTodos = false;
    private SquadDto squadelecionado = new SquadDto();
    private List<SquadDto> squadSelecionados = new List<SquadDto>();
    private List<SquadDto> squad = new List<SquadDto>();


    private async Task AtualizarLista(string novoFiltro)
    {
        filtroGrid = novoFiltro;
    }



    protected override async Task OnInitializedAsync()
    {
        squad = await CarregaGrid();
    }

    private async Task<List<SquadDto>> CarregaGrid()
    {
        await AtivarTemporizadorSucesso();
        squadSelecionados.Clear();
        contadorSelecionados = 0;
        erro = string.Empty;
        sucesso = string.Empty;
        List<SquadDto> squad = await _iSquadServico.ObterTodasSquadAsync();
        return squad;
    }

    // private async Task MsgSucesso()
    // {
    //     sucesso = "squad cadastrado com sucesso!";
    //     await AtivarTemporizadorSucesso();
    // }

    private async Task AtivarTemporizadorSucesso()
    {
        Console.WriteLine("AtivarTemporizadorSucesso chamado.");
        await Task.Delay(2000); // Aguarda 2 segundos
        sucesso = null;
        StateHasChanged();
    }

    // private async Task MsgErro()
    // {
    //     erro = "squad com erro!";
    //     await AtivarTemporizadorErro();
    // }

    private async Task AtivarTemporizadorErro()
    {
        Console.WriteLine("AtivarTemporizadorErro chamado.");
        erro = "squad com erro!";
        await Task.Delay(2000); // Aguarda 2 segundos
        erro = null;
        StateHasChanged();
    }


    // private async Task SquadCadastro(SquadDto SquadDto)
    // {
    //     try
    //     {
    //         var squadJson = JsonSerializer.Serialize(SquadDto);
    //         var encodedsquadJson = Uri.EscapeDataString(squadJson);
    //         NavigationManager.NavigateTo($"Squad/SquadCadastro/{encodedsquadJson}");
    //         sucesso = "squad cadastrado com sucesso!";
    //     }
    //     catch (Exception ex)
    //     {
    //         erro = "Ocorreu um erro inesperado: " + ex.Message;
    //         await AtivarTemporizadorErro();
    //     }

    // }


    private async Task BotaoInserir()
    {
        try
        {
            NavigationManager.NavigateTo($"Squad/SquadCadastro/{null}");
            sucesso = "squad cadastrado com sucesso!";
        }
        catch (Exception ex)
        {
            erro = "Ocorreu um erro inesperado: " + ex.Message;
            await AtivarTemporizadorErro();
        }

    }

    private async Task Alterar(SquadDto squad)
    {
        try
        {
            var squadJson = JsonSerializer.Serialize(squad);
            var encodedsquadJson = Uri.EscapeDataString(squadJson);
            NavigationManager.NavigateTo($"/Squad/SquadCadastro/{encodedsquadJson}");
            sucesso = "squad cadastrado com sucesso!";
            await AtivarTemporizadorSucesso();
        }
        catch (Exception ex)
        {
            erro = "Ocorreu um erro inesperado: " + ex.Message;
            await AtivarTemporizadorErro();
        }
    }

    private async Task BotaoExcluir()
    {
        foreach (var squad in squadSelecionados)
        {
            try
            {
                await _iSquadServico.ExcluirAsync(squad.Id);
                sucesso = "squad excluido com sucesso!";
            }
            catch (Exception ex)
            {
                erro = "Ocorreu um erro inesperado: " + ex.Message;
                await AtivarTemporizadorErro();
            }
        }
        await CarregaGrid();
    }

    private void SelecionarTodos()
    {
        idSelecionarTodos = !idSelecionarTodos;
        contadorSelecionados = 0;
        squadSelecionados.Clear();

        if (idSelecionarTodos)
        {
            foreach (var squad in squad)
            {
                squad.Selecionado = true;
                if (!squadSelecionados.Contains(squad))
                {
                    squadSelecionados.Add(squad);
                    contadorSelecionados++;
                    squad.Selecionado = true;
                }
            }
            Console.WriteLine("Checkbox selecionado");
        }
        else
        {
            foreach (var squad in squad)
            {
                squad.Selecionado = true;
                if (!squadSelecionados.Contains(squad))
                {
                    squad.Selecionado = false;
                }
            }
            Console.WriteLine("Checkbox não selecionado");
        }

    }


    void Selecionado(SquadDto squad)
    {

        if (!squad.Selecionado)
        {
            squadSelecionados.Add(squad);
            contadorSelecionados++;
            squad.Selecionado = true;
            squadelecionado = squad;
        }
        else
        {
            squadSelecionados.Remove(squad);
            contadorSelecionados--;
            squad.Selecionado = false;
            squadelecionado = null;
        }
    }


    private List<SquadDto> squads = new List<SquadDto>();

    private bool showModal = false;
    private void CloseModal()
    {
        showModal = false;
    }

    private async Task OpenModal()
    {
        try
        {
            squads = await _iSquadServico.ObterTodasSquadAsync();
            if (squads.Count <= 0)
            {
                SquadDto squadOff = new SquadDto
                    {
                        Id = 1,
                        Descricao = "Exemplo OFF",
                        Inativo = false
                    };
                squads.Add(squadOff);
            }

            showModal = true;
        }
        catch (Exception ex)
        {
            erro = "Erro ao carregar os squads: " + ex.Message;
        }
    }
 
}