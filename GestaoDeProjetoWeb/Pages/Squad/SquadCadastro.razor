@page "/Squad/squadCadastro"
@page "/Squad/squadCadastro/{squadJson}"
@using GestaoDeProjetoWeb.Data.DTOs
@using GestaoDeProjetoWeb.Data.Util
@using GestaoDeProjetoWeb.Data
@using System.ComponentModel.DataAnnotations;
@using System.Text.Json
@using GestaoDeProjetoWeb.Pages.Componentes
@using GestaoDeProjetoWeb.Servico
@inject NavigationManager NavigationManager
@inject ISquadServico _iSquadServico


<body class="adicionarCorFundoPagina">

    <GridApresentacaoComponente PaginaAnterior="Squad"
        PaginaAnteriorLink="/Squad/SquadGrid"
        PaginaAtual=@(squadCadastro.Id > 0 ? "Editar" : "Inserir")
        InformacaoPagina=""
        Titulo=@(squadCadastro.Id > 0 ? "Formulário de alterar" : "Formulário de inserção") />


    <div class="align-items-center adicionaEspaco adicionarBorda adicionarCorInterna">
        <EditForm Model="@squadCadastro" OnValidSubmit="@CadastrarSquad"
                  class="row g-1 formulario-Input">
            <DataAnnotationsValidator />

            @if (!string.IsNullOrWhiteSpace(erro))
            {
                <div class="alert alert-danger" role="alert">
                    @erro
                </div>
            }


            <div class="form-floating col-12">
                <input type="text" class="form-control form-control-lg" id="nomeSquad" @bind="@squadCadastro.Descricao" placeholder="Descreva o nome do Squad" />
                <label for="nomeSquad">Nome do Squad</label>
                <ValidationMessage For="@(() => squadCadastro.Descricao)" />
            </div>




            <FormularioBotoesComponente OnCancel="Cancelar" OnSave="CadastrarSquad" />

@*             <div class="col-12 button-group">
                <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
                <button type="submit" class="btn btn-primary">Salvar</button>
            </div> *@

        </EditForm>
    </div>
</body>


@code {
    [Parameter]
    public string squadJson { get; set; }
    private SquadDto squadCadastro = new SquadDto();
    private HttpClient httpClient = new HttpClient();
    private List<ComboItem> comboItems = new List<ComboItem>();

    private string erro = string.Empty;






    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            comboItems = await _iSquadServico.ObterComboAsync();
        }
        catch (Exception ex)
        {
            erro = "Erro ao carregar os dados: " + ex.Message;
        }

        if (!string.IsNullOrEmpty(squadJson))
        {
            try
            {
                squadCadastro = JsonSerializer.Deserialize<SquadDto>(Uri.UnescapeDataString(squadJson));
            }
            catch (Exception ex)
            {
                erro = "Erro ao desserializar o Squad: " + ex.Message;
                await AtivarTemporizadorErro();
            }
        }
    }

    private async Task CadastrarSquad()
    {
        try
        {
            HttpResponseMessage response = new HttpResponseMessage();
            response = await _iSquadServico.CadastroAsync(squadCadastro);

            if (!response.IsSuccessStatusCode)
            {
                erro = "Ocorreu um erro ao adicionar/atualizar o Squad. Por favor, tente novamente. " + response.ToString();
                await AtivarTemporizadorErro();
            }
            else
            {
                NavigationManager.NavigateTo("/Squad/SquadGrid");
            }
        }
        catch (Exception ex)
        {
            erro = "Ocorreu um erro ao adicionar o Squad. Por favor, tente novamente. " + ex.Message.ToString();
            await AtivarTemporizadorErro();
        }

    }

    private async Task AtivarTemporizadorErro()
    {
        Console.WriteLine("AtivarTemporizadorErro chamado.");
        await Task.Delay(2000);
        erro = "";

        StateHasChanged();
    }

    private void Cancelar()
    {
        NavigationManager.NavigateTo("/Squad/SquadGrid");
    }





}