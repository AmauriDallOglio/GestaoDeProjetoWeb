@page "/ProjetoSquad/ProjetoSquadCadastro"
@page "/ProjetoSquad/ProjetoSquadCadastro/{projetoJson}"
@using GestaoDeProjetoWeb.Data
@using GestaoDeProjetoWeb.Data.DTOs
@using System.Text.Json
@using System.Text
@using GestaoDeProjetoWeb.Data.Util
@using GestaoDeProjetoWeb.Servico
@using GestaoDeProjetoWeb.Pages.Componentes
@inject ISquadServico _iSquadServico
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IProjetoSquadServico _iProjetoSquadServico


<body class="adicionarCorFundoPagina">

    <GridApresentacaoComponente PaginaAnterior="Projeto"
        PaginaAnteriorLink="/Projeto/ProjetoGrid"
        PaginaAtual=@(dadosCadastro.Id > 0 ? "Editar" : "Inserir")
        InformacaoPagina="Projeto/ProjetoInfo"
        Titulo=@(dadosCadastro.Id > 0 ? "Squad no projeto" : "Squad no projeto") />


    <div class=" align-items-center adicionaEspaco adicionarBorda adicionarCorInterna">
        <EditForm Model="@dadosCadastro" OnValidSubmit="@Inserir" class="row g-1 formulario-Input">
            <DataAnnotationsValidator />

            @if (!string.IsNullOrWhiteSpace(erro))
            {
                <div class="alert alert-danger" role="alert">
                    @erro
                </div>
            }

            <div class="form-floating col-12">
                <input type="text" class="form-control tamanho-fonte-input" id="nomeProjeto" @bind="@dadosCadastro.NomeProjeto" placeholder="Descreva o nome do projeto" disabled />
                <label for="nomeProjeto">Nome do Projeto</label>
                <ValidationMessage For="@(() => dadosCadastro.NomeProjeto)" />
            </div>

            <div class="form-floating col-6">
                <select class="form-select tamanho-fonte-input" id="id_Squad" @bind="@dadosCadastro.Id_Squad">
                    <option value="">Selecione...</option>
                    @foreach (var situacao in comboItems)
                    {
                        <option value="@situacao.Id">@situacao.Descricao</option>
                    }
                </select>
                <label for="id_Squad">Situação:</label>
                <ValidationMessage For="@(() => dadosCadastro.Id_Squad)" />
            </div>

            <FormularioBotoesComponente OnCancel="Cancelar" OnSave="Inserir" />

       @*      <div class="col-12 grupo-Botoes">
                <button type="button" class="botao-Customizado botao-Customizado-pesquisar" @onclick="Cancelar">
                    <ion-icon class="botao-Customizado-Icone" name="exit-outline"></ion-icon>
                    Cancelar
                </button>
                <button type="submit" class="botao-Customizado botao-Customizado-inserir" @onclick="Inserir">
                    <ion-icon class="botao-Customizado-Icone" name="save-outline"></ion-icon>
                    Salvar
                </button>
            </div>

            <div class="col-12 button-group">
                <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>

                <button type="button" class="btn btn-outline-success custom-btn" @onclick="Inserir">Inserir</button>
            </div> *@
        </EditForm>
    </div>

    <div class="adicionaEspaco adicionarBorda tabela-Largura adicionarCorInterna">
        @if (listaGrid != null && listaGrid.Any())
        {
            <table class="table">
                <thead class="adicionarCorInterna">
                    <tr>
                        <th class="col-1 estilo-Cabecalho-Colunas">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="idSelecionarTodos" @onclick="SelecionarTodos" />
                            </div>
                        </th>

                        <th class="col-1 estilo-Cabecalho-Colunas">Id</th>
                        <th class="col-1 estilo-Cabecalho-Colunas">IdProjeto</th>
                        <th class="col-3 estilo-Cabecalho-Colunas">Nome Projeto</th>
                        <th class="col-1 estilo-Cabecalho-Colunas">IdSquad</th>
                        <th class="col-3 estilo-Cabecalho-Colunas">Nome Squad</th>
                        <th class="col-1 estilo-Cabecalho-Colunas">Inativo</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var squad in listaGrid)
                    {
                        <tr>
                            <td class="col-1 estilo-Campos-Colunas text-center">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" @bind="squad.Selecionado" id="idSelecionado" @onclick="() => Selecionado(squad)" />
                                </div>
                            </td>
                            <td class="col-1 estilo-Campos-Colunas">@squad.Id</td>
                            <td class="col-1 estilo-Campos-Colunas">@squad.Id_Projeto</td>
                            <td class="col-1 estilo-Campos-Colunas">@squad.NomeProjeto</td>
                            <td class="col-1 estilo-Campos-Colunas">@squad.Id_Squad</td>
                            <td class="col-1 estilo-Campos-Colunas">@squad.NomeSquad</td>
                            <td class="col-1 estilo-Campos-Colunas">@squad.Inativo</td>
                        </tr>
                        @if (projetoSelecionado == squad)
                        {

                            <tr>
                                <td colspan="8">
                                    <GridBotoesSelecionadoComponente HabilitaBotaoAlterar="false"
                                                                     OnAlterar="() => null"
                                                                     HabilitaBotaoExcluir="true"
                                                                     OnExcluir="Excluir"
                                                                     HabilitaBotaoFormulario="false"
                                                                     OnSquad="() => null" />
                                </td>
                            </tr>

             
                        }
                    }
                </tbody>
            </table>
        }
        else
        {
            <GridCarregando LoadingMessage="Carregando dados, por favor aguarde..." />

        }
    </div>

</body>




@code {
    [Parameter]
    public string projetoJson { get; set; }
    private ProjetoSquadDto dadosCadastro = new ProjetoSquadDto();
    private HttpClient httpClient = new HttpClient();
    private List<ComboItem> comboItems = new List<ComboItem>();
    private List<SquadDto> squads = new List<SquadDto>();
    private List<ProjetoSquadDto> listaGrid = new List<ProjetoSquadDto>();
    private string erro = string.Empty;






    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            List<SquadDto> squads = await _iSquadServico.ObterTodasSquadAsync();
            comboItems = await _iSquadServico.ObterComboAsync();
        }
        catch (Exception ex)
        {
            erro = "Erro ao carregar os dados: " + ex.Message;
        }

        if (!string.IsNullOrEmpty(projetoJson))
        {
            try
            {
                ProjetoDto projetoDto = JsonSerializer.Deserialize<ProjetoDto>(Uri.UnescapeDataString(projetoJson));
                dadosCadastro.Id_Projeto = projetoDto.Id;
                dadosCadastro.NomeProjeto = projetoDto.NomeProjeto;

            }
            catch (Exception ex)
            {
                erro = "Erro ao desserializar o projeto: " + ex.Message;
                await AtivarTemporizadorErro();
            }
        }
        listaGrid = await CarregaGrid();
    }

    private async Task Inserir()
    {
        try
        {
            HttpResponseMessage response = new HttpResponseMessage();
            response = await _iProjetoSquadServico.InserirAsync(dadosCadastro);
            if (!response.IsSuccessStatusCode)
            {
                erro = "Ocorreu um erro ao adicionar/atualizar o projeto. Por favor, tente novamente. " + response.ToString();
                await AtivarTemporizadorErro();
            }
            else
            {
                listaGrid = await CarregaGrid();
            }
        }
        catch (Exception ex)
        {
            erro = "Ocorreu um erro ao adicionar o projeto. Por favor, tente novamente. " + ex.Message.ToString();
            await AtivarTemporizadorErro();
        }
    }

    private void Cancelar()
    {
        NavigationManager.NavigateTo("/Projeto/ProjetoGrid");
    }



    
    private async Task Excluir()
    {
        foreach (var projeto in projetosSelecionados)
        {
            try
            {
                await _iProjetoSquadServico.Excluir(projeto.Id);
            }
            catch (Exception ex)
            {
                erro = "Ocorreu um erro inesperado: " + ex.Message;
                await AtivarTemporizadorErro();
            }
        }
        listaGrid = await CarregaGrid();
    }

    private async Task<List<ProjetoSquadDto>> CarregaGrid()
    {

        List<ProjetoSquadDto> projetos = await _iProjetoSquadServico.ObterTodosAsync();
        return projetos;
    }



    private async Task AtivarTemporizadorErro()
    {
        Console.WriteLine("AtivarTemporizadorErro chamado.");
        await Task.Delay(2000);
        erro = "";

        StateHasChanged();
    }

 

 
    private string filtro = string.Empty;

    private List<ProjetoSquadDto> projetosSelecionados = new List<ProjetoSquadDto>();
    private int contadorSelecionados = 0;
    bool idSelecionarTodos = false;
    private ProjetoSquadDto projetoSelecionado = new ProjetoSquadDto();
    private void SelecionarTodos()
    {
        idSelecionarTodos = !idSelecionarTodos;
        contadorSelecionados = 0;
        projetosSelecionados.Clear();

        if (idSelecionarTodos)
        {
            foreach (var item in listaGrid)
            {
                item.Selecionado = true;
                if (!projetosSelecionados.Contains(item))
                {
                    projetosSelecionados.Add(item);
                    contadorSelecionados++;
                    item.Selecionado = true;
                }
            }
            Console.WriteLine("Checkbox selecionado");
        }
        else
        {
            foreach (var item in listaGrid)
            {
                item.Selecionado = true;
                if (!projetosSelecionados.Contains(item))
                {
                    item.Selecionado = false;
                }
            }
            Console.WriteLine("Checkbox não selecionado");
        }

    }


    void Selecionado(ProjetoSquadDto item)
    {

        if (!item.Selecionado)
        {
            projetosSelecionados.Add(item);
            contadorSelecionados++;
            item.Selecionado = true;
            projetoSelecionado = item;
        }
        else
        {
            projetosSelecionados.Remove(item);
            contadorSelecionados--;
            item.Selecionado = false;
            projetoSelecionado = null;
        }
    }

}