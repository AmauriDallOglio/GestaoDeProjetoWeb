@page "/ProjetoSquad/ProjetoSquadCadastro"
@page "/ProjetoSquad/ProjetoSquadCadastro/{projetoJson}"
@using GestaoDeProjetoWeb.Data
@using GestaoDeProjetoWeb.Data.DTOs
@using System.Text.Json
@using System.Text
@using GestaoDeProjetoWeb.Data.Util
@using GestaoDeProjetoWeb.Servico
@inject ISquadServico _iSquadServico

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IProjetoSquadServico _iProjetoSquadServico


<body>
    <div class="bordered-div">
        <h3>@(dadosCadastro != null ? "Cadastro das Squad" : "Cadastro das Squad")</h3>


        <div class="hstack gap-3">
            <div class="p-2">
                <nav style="--bs-breadcrumb-divider: '>';" aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="#">Home</a></li>
                        <li class="breadcrumb-item" <a href="/Projeto/ProjetoGrid">Projeto</a> </li>
                        <li class="breadcrumb-item active" aria-current="page"> Squad </li>
                    </ol>
                </nav>

            </div>
        </div>

    

        <div class="row g-3 align-items-center adicionaEspaco bordered-div">
            <EditForm Model="@dadosCadastro" OnValidSubmit="@Inserir" class="row g-1 form-custom">
                <DataAnnotationsValidator />

                @if (!string.IsNullOrWhiteSpace(erro))
                {
                    <div class="alert alert-danger" role="alert">
                        @erro
                    </div>
                }



                <div class="form-floating col-12">
                    <input type="text" class="form-control form-control-lg" id="nomeProjeto" @bind="@dadosCadastro.NomeProjeto" placeholder="Descreva o nome do projeto" disabled />
                    <label for="nomeProjeto">Nome do Projeto</label>
                    <ValidationMessage For="@(() => dadosCadastro.NomeProjeto)" />
                </div>

                <div class="form-floating col-6">
                    <select class="form-select form-control-lg" id="id_Squad" @bind="@dadosCadastro.Id_Squad">
                        @foreach (var situacao in comboItems)
                        {
                            <option value="@situacao.Id">@situacao.Descricao</option>
                        }
                    </select>
                    <label for="id_Squad">Situação:</label>
                    <ValidationMessage For="@(() => dadosCadastro.Id_Squad)" />
                </div>



                <div class="col-12 button-group">
                    @* <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button> *@
                   
                    <button type="button" class="btn btn-outline-success custom-btn" @onclick="Inserir">Inserir</button>
                </div>

            </EditForm>
        </div>

        <div class="row g-3 align-items-center adicionaEspaco bordered-div">
            @if (listaGrid != null && listaGrid.Any())
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th class="text-center">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="idSelecionarTodos" @onclick="SelecionarTodos" />
                                </div>
                            </th>

                            <th>Id</th>
                            <th>IdProjeto</th>
                            <th>Nome Projeto</th>
                            <th>IdSquad</th>
                            <th>Nome Squad</th>
                            <th>Inativo</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var squad in listaGrid)
                        {
                            <tr>
                                <td class="text-center">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" @bind="squad.Selecionado" id="idSelecionado" @onclick="() => Selecionado(squad)" />
                                    </div>
                                </td>
                                <td>@squad.Id</td>
                                <td>@squad.Id_Projeto</td>
                                <td>@squad.NomeProjeto</td>
                                <td>@squad.Id_Squad</td>
                                <td>@squad.NomeSquad</td>
                                <td>@squad.Inativo</td>
                            </tr>
                            @if (projetoSelecionado == squad)
                            {
                                <tr>
                                    <td colspan="8">
            
                                        <button class="btn btn-outline-danger custom-btn" @onclick="Excluir">Excluir</button>
 

                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>Carregando...</p>
            }
        </div>
    </div>
</body>




@code {
    [Parameter]
    public string projetoJson { get; set; }
    private ProjetoSquadDto dadosCadastro = new ProjetoSquadDto();
    private HttpClient httpClient = new HttpClient();
    private List<ComboItem> comboItems = new List<ComboItem>();
    private List<SquadDto> squads = new List<SquadDto>();
    private List<ProjetoSquadDto> listaGrid = new List<ProjetoSquadDto>();
    private string erro = string.Empty;






    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            List<SquadDto> squads = await _iSquadServico.ObterTodasSquadAsync();
            comboItems = await _iSquadServico.ObterComboAsync();
        }
        catch (Exception ex)
        {
            erro = "Erro ao carregar os dados: " + ex.Message;
        }

        if (!string.IsNullOrEmpty(projetoJson))
        {
            try
            {
                ProjetoDto projetoDto = JsonSerializer.Deserialize<ProjetoDto>(Uri.UnescapeDataString(projetoJson));
                dadosCadastro.Id_Projeto = projetoDto.Id;
                dadosCadastro.NomeProjeto = projetoDto.NomeProjeto;

            }
            catch (Exception ex)
            {
                erro = "Erro ao desserializar o projeto: " + ex.Message;
                await AtivarTemporizadorErro();
            }
        }
        listaGrid = await CarregaGrid();
    }

    private async Task Inserir()
    {
        try
        {
            HttpResponseMessage response = new HttpResponseMessage();
            response = await _iProjetoSquadServico.InserirAsync(dadosCadastro);
       
            if (!response.IsSuccessStatusCode)
            {
                erro = "Ocorreu um erro ao adicionar/atualizar o projeto. Por favor, tente novamente. " + response.ToString();
                await AtivarTemporizadorErro();
            }
            else
            {
                listaGrid = await CarregaGrid();
            
            }
        }
        catch (Exception ex)
        {
            erro = "Ocorreu um erro ao adicionar o projeto. Por favor, tente novamente. " + ex.Message.ToString();
            await AtivarTemporizadorErro();
        }
    }

    
    private async Task Excluir()
    {
        foreach (var projeto in projetosSelecionados)
        {
            try
            {
                await _iProjetoSquadServico.Excluir(projeto.Id);
            }
            catch (Exception ex)
            {
                erro = "Ocorreu um erro inesperado: " + ex.Message;
                await AtivarTemporizadorErro();
            }
        }
        listaGrid = await CarregaGrid();
    }

     private async Task<List<ProjetoSquadDto>> CarregaGrid()
    {

        List<ProjetoSquadDto> projetos = await _iProjetoSquadServico.ObterTodosAsync();
        return projetos;
    }



    private async Task AtivarTemporizadorErro()
    {
        Console.WriteLine("AtivarTemporizadorErro chamado.");
        await Task.Delay(2000);
        erro = "";

        StateHasChanged();
    }

    private void Cancelar()
    {
        NavigationManager.NavigateTo("/Projeto/ProjetoGrid");
    }


 
    private string filtro = string.Empty;

    private List<ProjetoSquadDto> projetosSelecionados = new List<ProjetoSquadDto>();
    private int contadorSelecionados = 0;
    bool idSelecionarTodos = false;
    private ProjetoSquadDto projetoSelecionado = new ProjetoSquadDto();
    private void SelecionarTodos()
    {
        idSelecionarTodos = !idSelecionarTodos;
        contadorSelecionados = 0;
        projetosSelecionados.Clear();

        if (idSelecionarTodos)
        {
            foreach (var item in listaGrid)
            {
                item.Selecionado = true;
                if (!projetosSelecionados.Contains(item))
                {
                    projetosSelecionados.Add(item);
                    contadorSelecionados++;
                    item.Selecionado = true;
                }
            }
            Console.WriteLine("Checkbox selecionado");
        }
        else
        {
            foreach (var item in listaGrid)
            {
                item.Selecionado = true;
                if (!projetosSelecionados.Contains(item))
                {
                    item.Selecionado = false;
                }
            }
            Console.WriteLine("Checkbox não selecionado");
        }

    }


    void Selecionado(ProjetoSquadDto item)
    {

        if (!item.Selecionado)
        {
            projetosSelecionados.Add(item);
            contadorSelecionados++;
            item.Selecionado = true;
            projetoSelecionado = item;
        }
        else
        {
            projetosSelecionados.Remove(item);
            contadorSelecionados--;
            item.Selecionado = false;
            projetoSelecionado = null;
        }
    }

}